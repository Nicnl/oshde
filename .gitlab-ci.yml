variables:
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE/orchestrator

# Obtenir quelques infos avant de faire quoi que ce soit, c'est toujours bon Ã  prendre
before_script:
- whoami
- docker info

# Fabrication de l'image Docker
build:
  stage: build
  tags: [docker-builder]
  script:
  - docker build -t $DOCKER_IMAGE:local_build .

# Si c'est un COMMIT uniquement, alors on donne au Docker une version correspondant au nom de la branche (master, stable, chantier, ...)
deploy:branch:
  stage: deploy
  tags: [docker-builder]
  except: [tags] # <= Uniquement les commits normaux
  script:
  - docker login -u $CI_REGISTRY_USER -p $CI_BUILD_TOKEN $CI_REGISTRY
  - docker tag $DOCKER_IMAGE:local_build $DOCKER_IMAGE:$CI_COMMIT_REF_NAME
  - docker push $DOCKER_IMAGE:$CI_COMMIT_REF_NAME

# Si c'est un TAG uniquement, alors on donne au Docker une version correspondant au nom du tag (v0.1, v0.2, ...)
deploy:tag:
  stage: deploy
  tags: [docker-builder]
  only: [tags] # <= Uniquement les tags
  script:
  - docker login -u $CI_REGISTRY_USER -p $CI_BUILD_TOKEN $CI_REGISTRY
  - docker tag $DOCKER_IMAGE:local_build $DOCKER_IMAGE:$CI_COMMIT_TAG
  - docker push $DOCKER_IMAGE:$CI_COMMIT_TAG

# Dans TOUS les cas, on pousse aussi un Docker avec la version "latest"
deploy:latest:
  stage: deploy
  tags: [docker-builder]
  script:
  - docker login -u $CI_REGISTRY_USER -p $CI_BUILD_TOKEN $CI_REGISTRY
  - docker tag $DOCKER_IMAGE:local_build $DOCKER_IMAGE:latest
  - docker push $DOCKER_IMAGE:latest
